import java.io.*;
import java.util.regex.*;
import org.apache.commons.lang3.StringUtils;
import org.apache.jmeter.util.JMeterUtils;      // http://jakarta.apache.org/jmeter/api/org/apache/jmeter/util/JMeterUtils.html
import org.apache.jmeter.threads.JMeterContext; // http://jakarta.apache.org/jmeter/api/org/apache/jmeter/threads/JMeterContext.html
import org.apache.jmeter.samplers.SampleResult; // http://jakarta.apache.org/jmeter/api/org/apache/jmeter/samplers/SampleResult.html

MoodleResult(JMeterContext ctx) {

    Integer thread = ctx.getThreadNum();
    SampleResult result = ctx.getPreviousResult();

    String html = result.getResponseDataAsString();

    String dbreads = "0";
    Pattern pdbreads = Pattern.compile(".*?DB reads/writes: (\\d+)/\\d+.*", Pattern.UNIX_LINES | Pattern.DOTALL);
    Matcher mdbreads = pdbreads.matcher(html);
    if (mdbreads.matches()) {
        dbreads = mdbreads.group(1);
    }

    String dbwritesstr = "0";
    Pattern pdbwrites = Pattern.compile(".*?DB reads/writes: \\d+/(\\d+).*", Pattern.UNIX_LINES | Pattern.DOTALL);
    Matcher mdbwrites = pdbwrites.matcher(html);
    if (mdbwrites.matches()) {
        dbwritesstr = mdbwrites.group(1);
    }
    Integer dbwrites = Integer.parseInt(dbwritesstr);

    // Adding logs if required.
    if (props.get("includelogs") != null) {
        Pattern plogwrites = Pattern.compile(".*?Log DB writes (\\d+).*", Pattern.UNIX_LINES | Pattern.DOTALL);
        Matcher mlogwrites = plogwrites.matcher(html);
        if (mlogwrites.matches()) {
            dbwrites = dbwrites + Integer.parseInt(mlogwrites.group(1));
        }
    }

    String dbquerytime = "0";
    Pattern pdbquerytime = Pattern.compile(".*?DB queries time: (\\d+(\\.\\d+)?) secs.*", Pattern.UNIX_LINES | Pattern.DOTALL);
    Matcher mdbquerytime = pdbquerytime.matcher(html);
    if (mdbquerytime.matches()) {
        dbquerytime = mdbquerytime.group(1);
    }

    String memoryused = "0";
    Pattern pmemoryused = Pattern.compile(".*?RAM: (\\d+(\\.\\d+)?)MB.*", Pattern.UNIX_LINES | Pattern.DOTALL);
    Matcher mmemoryused = pmemoryused.matcher(html);
    if (mmemoryused.matches()) {
        memoryused = mmemoryused.group(1);
    }

    String filesincluded = "0";
    Pattern pfilesincluded = Pattern.compile(".*?Included (\\d+) files.*", Pattern.UNIX_LINES | Pattern.DOTALL);
    Matcher mfilesincluded = pfilesincluded.matcher(html);
    if (mfilesincluded.matches()) {
        filesincluded = mfilesincluded.group(1);
    }

    String serverload = "0";
    Pattern pserverload = Pattern.compile(".*?Load average: (\\d+(\\.\\d+)?).*", Pattern.UNIX_LINES | Pattern.DOTALL);
    Matcher mserverload = pserverload.matcher(html);
    if (mserverload.matches()) {
        serverload = mserverload.group(1);
    }

    String sessionsize = "0";
    Pattern psessionsize = Pattern.compile(".*?Session[^:]*: (\\d+(\\.\\d+)?[A-Z]{2}).*", Pattern.UNIX_LINES | Pattern.DOTALL);
    Matcher msessionsize = psessionsize.matcher(html);
    if (msessionsize.matches()) {
        sessionsize = msessionsize.group(1);
    }

    String timeused = "0";
    Pattern ptimeused = Pattern.compile(".*?\"timeused\">(\\d+(\\.\\d+)?) secs.*", Pattern.UNIX_LINES | Pattern.DOTALL);
    Matcher mtimeused = ptimeused.matcher(html);
    if (mtimeused.matches()) {
        timeused = mtimeused.group(1);
    }

    // Actual information collected about the sample by jmeter
    String threadgroupname = ctx.getThreadGroup().getName();
    String labelname = StringUtils.rightPad(result.getSampleLabel(), 30);
    String url = result.getUrlAsString();
    Integer bytes = result.getBytes();
    Long time = result.getTime();
    Long latency = result.getLatency();
    Long starttime = result.getStartTime();
    String status = result.getResponseCode();

    headerToString() {
        String str = "MOODLETESTDATA | ";
        str += StringUtils.rightPad("threadgroupname", 30) + " | ";
        str += "status | thread | ";
        str += StringUtils.rightPad("labelname", 30) + " | ";
        str += "dbreads | dbwrites | ";
        str += StringUtils.rightPad("dbquerytime", 8) + " | ";
        str += StringUtils.rightPad("memory", 8) + " | ";
        str += StringUtils.rightPad("filesincluded", 6) + " | ";
        str += StringUtils.rightPad("serverload", 6) + " |";
        str += StringUtils.rightPad("sessionsize", 6) + " | ";
        str += StringUtils.rightPad("timeused", 6) + " | ";
        str += StringUtils.rightPad("bytes", 6) + " | ";
        str += StringUtils.rightPad("time", 6) + " | ";
        str += StringUtils.rightPad("latency", 6) + " | ";
        str += StringUtils.rightPad("starttime", 6) + " | ";
        str += "url";
        return str;
    }

    toString() {
        String str = "MOODLETESTDATA | ";
        str += StringUtils.rightPad(threadgroupname, 30) + " | ";
        str += StringUtils.rightPad(status, 6) + " | ";
        str += StringUtils.rightPad(Integer.toString(thread), 6) + " | ";
        str += StringUtils.rightPad(labelname, 30) + " | ";
        str += StringUtils.rightPad(dbreads, 4) + " | ";
        str += StringUtils.rightPad(Integer.toString(dbwrites), 4) + " | ";
        str += StringUtils.rightPad(dbquerytime, 8) + " | ";
        str += StringUtils.rightPad(memoryused, 8) + " | ";
        str += StringUtils.rightPad(filesincluded, 6) + " | ";
        str += StringUtils.rightPad(serverload, 6) + " | ";
        str += StringUtils.rightPad(sessionsize, 6) + " | ";
        str += StringUtils.rightPad(timeused, 6) + " | ";
        str += StringUtils.rightPad(Integer.toString(bytes), 6) + " | ";
        str += StringUtils.rightPad(Long.toString(time), 6) + " | ";
        str += StringUtils.rightPad(Long.toString(latency), 6) + " | ";
        str += StringUtils.rightPad(Long.toString(starttime), 6) + " | ";
        str += url;
        return str;
    }

    toPHP() {
       String php = "$results["+thread+"][] = array(\n";
       php += "    'thread'=>"+thread+",\n";        // Int
       php += "    'starttime'=>"+starttime+",\n";      // Long
       php += "    'dbreads'=>"+Integer.parseInt(dbreads)+",\n";    // String => Int
       php += "    'dbwrites'=>"+dbwrites+",\n";
       php += "    'dbquerytime'=>"+dbquerytime+",\n";
       php += "    'memoryused'=>'"+memoryused+"',\n";
       php += "    'filesincluded'=>'"+filesincluded+"',\n";
       php += "    'serverload'=>'"+serverload+"',\n";
       php += "    'sessionsize'=>'"+sessionsize+"',\n";
       php += "    'timeused'=>'"+timeused+"',\n";
       php += "    'labelname'=>'"+labelname+"',\n";
       php += "    'url'=>'"+url+"',\n";
       php += "    'bytes'=>'"+bytes+"',\n";
       php += "    'time'=>'"+time+"',\n";
       php += "    'latency'=>'"+latency+"',\n";
       php += ");\n";
       return php;
    }

    return this;
}

EscapeQuotes(String text) {
    return text.replace("'", "\\'");
}

Runnable mr = MoodleResult(ctx);

// Get the file (it is created in testStarted).
String filenamepath = "jmeter_data/runs/tmpfilename.php";
String threadgroupname = ctx.getThreadGroup().getName();
String filenamepath = "jmeter_data/runs/" + vars.get("runtimestamp") + "_" + StringUtils.replace(threadgroupname, " ", "_") + ".php";

// We add the run info when starting the first thread
if ((JMeterUtils.getProperty("headerprinted") == null) || !JMeterUtils.getProperty("headerprinted").equals(threadgroupname)) {

    // Output headers.
    JMeterUtils.setProperty("headerprinted", threadgroupname);
    print(mr.headerToString());

    FileWriter fstream = new FileWriter(filenamepath);
    BufferedWriter out = new BufferedWriter(fstream);
    out.write("<?php\n");
    out.write("$threadgroupname = '"+threadgroupname+"';\n");
    out.write("$host = '"+vars.get("host")+"';\n");
    out.write("$sitepath = '"+vars.get("sitepath")+"';\n");
    out.write("$group = '"+EscapeQuotes(props.get("group"))+"';\n");
    out.write("$rundesc = '"+EscapeQuotes(props.get("desc"))+"';\n");
    out.write("$users = '"+Integer.toString(ctx.getThreadGroup().getNumThreads())+"';\n");
    out.write("$loopcount = '"+ctx.getThreadGroup().getSamplerController().getProperty("LoopController.loops")+"';\n");
    out.write("$rampup = '"+ctx.getThreadGroup().getProperty("ThreadGroup.ramp_time")+"';\n");
    out.write("$throughput = '"+vars.get("throughput")+"';\n");
    out.write("$dataplansize = '"+vars.get("dataplansize")+"';\n");
    out.write("$baseversion = '"+vars.get("moodleversion")+"';\n");
    out.write("$siteversion = '"+EscapeQuotes(props.get("siteversion"))+"';\n");
    out.write("$sitebranch = '"+EscapeQuotes(props.get("sitebranch"))+"';\n");
    out.write("$sitecommit = '"+EscapeQuotes(props.get("sitecommit"))+"';\n");
    out.write("$dataplanversion = '"+EscapeQuotes(vars.get("dataplanversion"))+"';\n");
    out.write("$testplansize = '"+EscapeQuotes(vars.get("testplansize"))+"';\n");
    out.write("$testplanversion = '"+EscapeQuotes(vars.get("testplanversion"))+"';\n");
    out.close();
}

FileWriter fstream = new FileWriter(filenamepath, true);
BufferedWriter out = new BufferedWriter(fstream);
out.write(mr.toPHP());
out.close();

print(mr.toString());
